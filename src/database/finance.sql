-- 1. Tablas sin dependencias hacia otras tablas
DROP TABLE IF EXISTS alert;
DROP TABLE IF EXISTS notification;
DROP TABLE IF EXISTS audit_log;
DROP TABLE IF EXISTS derivative;
DROP TABLE IF EXISTS derivative_type;
DROP TABLE IF EXISTS historical_forex_data;
DROP TABLE IF EXISTS forex;
DROP TABLE IF EXISTS historical_commodity_data;
DROP TABLE IF EXISTS commodity;
DROP TABLE IF EXISTS historical_crypto_data;
DROP TABLE IF EXISTS crypto;
DROP TABLE IF EXISTS historical_etf_data;
DROP TABLE IF EXISTS etf;
DROP TABLE IF EXISTS historical_stock_data;
DROP TABLE IF EXISTS stock;
DROP TABLE IF EXISTS price_history;
DROP TABLE IF EXISTS interval_time;
DROP TABLE IF EXISTS portfolio_asset;
DROP TABLE IF EXISTS asset;
DROP TABLE IF EXISTS type_asset;
DROP TABLE IF EXISTS exchange;
DROP TABLE IF EXISTS country;
DROP TABLE IF EXISTS transaction;
DROP TABLE IF EXISTS type_transaction;
DROP TABLE IF EXISTS currency;
DROP TABLE IF EXISTS performance;
DROP TABLE IF EXISTS valuation;
DROP TABLE IF EXISTS portfolio;
DROP TABLE IF EXISTS risk;
DROP TABLE IF EXISTS notification_type;

-- Tabla Risk
CREATE TABLE risk (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT pk_id_risk PRIMARY KEY(id),
  CONSTRAINT uk_name_risk UNIQUE(name)
);

-- Tabla Portfolio
CREATE TABLE portfolio (
  id UUID DEFAULT GEN_RANDOM_UUID() NOT NULL,
  name VARCHAR(120) NOT NULL,
  description VARCHAR(200),
  objective VARCHAR(50) NOT NULL,
  updated_latest TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  user_id UUID NOT NULL,
  risk_id INT NOT NULL,
  total_value NUMERIC DEFAULT 0.0,
  finish_date TIMESTAMP WITH TIME ZONE,
  CONSTRAINT pk_id_portfolio PRIMARY KEY(id),
  CONSTRAINT uk_name_portfolio UNIQUE(name),
  CONSTRAINT fk_user_id_portfolio FOREIGN KEY (user_id) REFERENCES auth_user(id) ON DELETE CASCADE,
  CONSTRAINT fk_risk_id_portfolio FOREIGN KEY (risk_id) REFERENCES risk(id)
);

-- Tabla Valuation
CREATE TABLE valuation (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  total_value NUMERIC DEFAULT 0.0,
  portfolio_id UUID NOT NULL,
  CONSTRAINT pk_id_valuation PRIMARY KEY(id),
  CONSTRAINT fk_portfolio FOREIGN KEY (portfolio_id) REFERENCES portfolio(id)
);

-- Tabla Performance
CREATE TABLE performance (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_value NUMERIC NOT NULL,
  total_value NUMERIC NOT NULL,
  portfolio_id UUID NOT NULL,
  CONSTRAINT pk_id_performace PRIMARY KEY(id),
  CONSTRAINT fk_portfolio_performance FOREIGN KEY (portfolio_id) REFERENCES portfolio(id)
);

-- Tabla Currency
CREATE TABLE currency (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  symbol VARCHAR(10) NOT NULL,
  exchange_rate NUMERIC NOT NULL,
  CONSTRAINT pk_id_currency PRIMARY KEY(id),
  CONSTRAINT uk_symbol_currency UNIQUE(symbol)
);

-- Tabla TypeTransaction
CREATE TABLE type_transaction (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT pk_id_type_transaction PRIMARY KEY(id),
  CONSTRAINT uk_symbol_type_transaction UNIQUE(name)
);

-- Tabla Transaction
CREATE TABLE transaction (
  id UUID DEFAULT gen_random_uuid() NOT NULL,  -- AÃ±adido NOT NULL
  date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  price NUMERIC NOT NULL,
  stock NUMERIC NOT NULL,
  type_transaction_id INT NOT NULL,
  portfolio_id UUID NOT NULL,
  fee NUMERIC DEFAULT 0.0,
  exchange_rate NUMERIC,
  CONSTRAINT pk_id_transaction PRIMARY KEY(id),
  CONSTRAINT fk_portfolio_transaction FOREIGN KEY (portfolio_id) REFERENCES portfolio(id) ON DELETE CASCADE,
  CONSTRAINT fk_type_transaction FOREIGN KEY (type_transaction_id) REFERENCES type_transaction(id) ON DELETE RESTRICT
);
CREATE INDEX idx_transaction_date_type ON transaction (date, type_transaction_id);

-- Tabla Country
CREATE TABLE country (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  code VARCHAR(10) NOT NULL,
  CONSTRAINT pk_id_country PRIMARY KEY(id),
  CONSTRAINT uk_name_country UNIQUE(name),
  CONSTRAINT uk_name_code UNIQUE(code)
);

-- Tabla Exchange
CREATE TABLE exchange (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  country_id INT NOT NULL,
  CONSTRAINT pk_id_exchange PRIMARY KEY(id),
  CONSTRAINT fk_country FOREIGN KEY (country_id) REFERENCES country(id),
  CONSTRAINT uk_name_exchange UNIQUE(name)
);

-- Tabla TypeAsset
CREATE TABLE type_asset (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT pk_id_type_asset PRIMARY KEY(id),
  CONSTRAINT uk_name_type_asset UNIQUE(name)
);

-- Tabla Asset
CREATE TABLE asset (
  id UUID DEFAULT gen_random_uuid() NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  initial_price NUMERIC,
  initial_date TIMESTAMP,
  type_asset_id INT NOT NULL,
  exchange_id INT NOT NULL,
  CONSTRAINT pk_id_asset PRIMARY KEY(id),
  CONSTRAINT fk_type_asset FOREIGN KEY (type_asset_id) REFERENCES type_asset(id),
  CONSTRAINT fk_exchange FOREIGN KEY (exchange_id) REFERENCES exchange(id)
);
CREATE INDEX idx_asset_name_initial_date ON asset (name, initial_date);

-- Tabla PortfolioAsset
CREATE TABLE portfolio_asset (
  id UUID DEFAULT gen_random_uuid(),
  date TIMESTAMP DEFAULT NOW(),
  date_added TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  stock NUMERIC NOT NULL,
  weight NUMERIC NOT NULL,
  initial_price NUMERIC NOT NULL,
  portfolio_id UUID NOT NULL,
  asset_id UUID NOT NULL,
  CONSTRAINT pk_id_portfolio_asset PRIMARY KEY(id),
  CONSTRAINT fk_portfolio_asset FOREIGN KEY (portfolio_id) REFERENCES portfolio(id) ON DELETE CASCADE,
  CONSTRAINT fk_asset FOREIGN KEY (asset_id) REFERENCES asset(id) ON DELETE CASCADE
);
CREATE INDEX idx_portfolio_asset_date_added ON portfolio_asset (date_added, portfolio_id, asset_id);

-- Tabla IntervalTime
CREATE TABLE interval_time (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  CONSTRAINT pk_id_interval_time PRIMARY KEY(id),
  CONSTRAINT uk_name_interval_time UNIQUE(name)
);

-- Tabla PriceHistory
CREATE TABLE price_history (
  id UUID DEFAULT gen_random_uuid() NOT NULL,
  date_price TIMESTAMP NOT NULL,
  open_price NUMERIC,
  high_price NUMERIC,
  low_price NUMERIC,
  close_price NUMERIC NOT NULL,
  volume BIGINT,
  created_at TIMESTAMP DEFAULT NOW(),
  asset_id UUID NOT NULL,
  interval_id INT NOT NULL,
  CONSTRAINT pk_id_price_history PRIMARY KEY(id),
  CONSTRAINT fk_interval_time FOREIGN KEY (interval_id) REFERENCES interval_time(id),
  CONSTRAINT fk_asset_price_history FOREIGN KEY (asset_id) REFERENCES asset(id)
);
CREATE INDEX idx_price_history_date ON price_history (date_price);

-- Tabla Stock
CREATE TABLE stock (
  asset_id UUID PRIMARY KEY,
  ticker VARCHAR(10) UNIQUE NOT NULL,
  sector VARCHAR(255),
  industry VARCHAR(255),
  market_cap BIGINT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  dividend_per_share NUMERIC DEFAULT 0.0,
  dividend_yield NUMERIC DEFAULT 0.0,
  dividend_date TIMESTAMP,
  exdividend_date TIMESTAMP,
  currency_id INT NOT NULL,
  address TEXT,
  official_site TEXT,
  lastest_quater TIMESTAMP,
  ebitda NUMERIC,
  pe_ratio NUMERIC,
  peg_ratio NUMERIC,
  book_value NUMERIC,
  eps NUMERIC,
  analyst_target_price NUMERIC,
  analyst_rating_strong_price INT DEFAULT 0,
  analyst_rating_buy INT DEFAULT 0,
  analyst_rating_hold INT DEFAULT 0,
  analyst_rating_sell INT DEFAULT 0,
  analyst_rating_strong_sell INT DEFAULT 0,
  shares_outstanding BIGINT,
  CONSTRAINT fk_currency FOREIGN KEY (currency_id) REFERENCES currency(id),
  CONSTRAINT fk_asset_stock FOREIGN KEY (asset_id) REFERENCES asset(id)
);
CREATE INDEX idx_stock_sector_industry ON stock (sector, industry, market_cap, exdividend_date, dividend_yield, pe_ratio);

-- Tabla HistoricalStockData
CREATE TABLE historical_stock_data (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date_price TIMESTAMP NOT NULL,
  close_price NUMERIC NOT NULL,
  open_price NUMERIC,
  high_price NUMERIC,
  low_price NUMERIC,
  volume BIGINT,
  dividend NUMERIC,
  split NUMERIC,
  stock_id UUID NOT NULL,
  CONSTRAINT pk_id_historical_stock_data PRIMARY KEY(id),
  CONSTRAINT fk_stock FOREIGN KEY (stock_id) REFERENCES stock(asset_id)
);
CREATE INDEX idx_historical_stock_data_date ON historical_stock_data (date_price);

-- Tabla ETF
CREATE TABLE etf (
  asset_id UUID PRIMARY KEY,
  manager VARCHAR(255) NOT NULL,
  dividend NUMERIC DEFAULT 0.0,
  CONSTRAINT fk_asset_etf FOREIGN KEY (asset_id) REFERENCES asset(id)
);

-- Tabla HistoricalETFData
CREATE TABLE historical_etf_data (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date_price TIMESTAMP NOT NULL,
  close_price NUMERIC NOT NULL,
  open_price NUMERIC,
  high_price NUMERIC,
  low_price NUMERIC,
  volume BIGINT,
  expense_ratio NUMERIC,
  yield FLOAT,
  etf_id UUID NOT NULL,
  CONSTRAINT pk_id_historical_etf_data PRIMARY KEY(id),
  CONSTRAINT fk_etf FOREIGN KEY (etf_id) REFERENCES etf(asset_id)
);
CREATE INDEX idx_historical_etf_data_date ON historical_etf_data (date_price);

-- Tabla Crypto
CREATE TABLE crypto (
  asset_id UUID PRIMARY KEY,
  blockchain VARCHAR(255),
  ticker VARCHAR(10) NOT NULL,
  CONSTRAINT fk_asset_crypto FOREIGN KEY (asset_id) REFERENCES asset(id)
);

-- Tabla HistoricalCryptoData
CREATE TABLE historical_crypto_data (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date_price TIMESTAMP NOT NULL,
  close_price NUMERIC NOT NULL,
  open_price NUMERIC,
  high_price NUMERIC,
  low_price NUMERIC,
  volume BIGINT,
  market_cap BIGINT,
  circulating_supply NUMERIC,
  crypto_id UUID NOT NULL,
  CONSTRAINT pk_id_historical_crypto_data PRIMARY KEY(id),
  CONSTRAINT fk_crypto FOREIGN KEY (crypto_id) REFERENCES crypto(asset_id)
);
CREATE INDEX idx_historical_crypto_data_date ON historical_crypto_data (date_price);

-- Tabla Commodity
CREATE TABLE commodity (
  asset_id UUID PRIMARY KEY,
  market_value FLOAT,
  CONSTRAINT fk_asset_commodity FOREIGN KEY (asset_id) REFERENCES asset(id)
);

-- Tabla HistoricalCommodityData
CREATE TABLE historical_commodity_data (
  id INT GENERATED BY DEFAULT AS IDENTITY,
  date_price TIMESTAMP NOT NULL,
  close_price NUMERIC NOT NULL,
  open_price NUMERIC,
  high_price NUMERIC,
  low_price NUMERIC,
  volume NUMERIC,
  market_value NUMERIC,
  commodity_id UUID NOT NULL,
  CONSTRAINT pk_id_historical_commodity_data PRIMARY KEY(id),
  CONSTRAINT fk_commodity FOREIGN KEY (commodity_id) REFERENCES commodity(asset_id)
);
CREATE INDEX idx_historical_commodity_data_date ON historical_commodity_data (date_price);

-- Tabla Forex
CREATE TABLE forex (
  asset_id UUID PRIMARY KEY,
  country_from_id INT NOT NULL,
  country_to_id INT NOT NULL,
  exchange_rate FLOAT NOT NULL,
  CONSTRAINT fk_country_from FOREIGN KEY (country_from_id) REFERENCES country(id),
  CONSTRAINT fk_country_to FOREIGN KEY (country_to_id) REFERENCES country(id),
  CONSTRAINT fk_asset_forex FOREIGN KEY (asset_id) REFERENCES asset(id)
);

-- Tabla HistoricalForexData
CREATE TABLE historical_forex_data (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  date_price TIMESTAMPTZ NOT NULL,
  close_price DECIMAL NOT NULL,
  open_price DECIMAL,
  high_price DECIMAL,
  low_price DECIMAL,
  spread DECIMAL NOT NULL,
  volume BIGINT,
  forex_id UUID NOT NULL,
  CONSTRAINT pk_id_historical_forex_data PRIMARY KEY(id),
  CONSTRAINT fk_forex_id FOREIGN KEY (forex_id) REFERENCES forex(asset_id)
);


CREATE INDEX idx_date_price ON historical_forex_data(date_price);

CREATE TABLE derivative_type (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR UNIQUE NOT NULL,
  CONSTRAINT pk_id_derivative_type PRIMARY KEY(id),
  CONSTRAINT uk_name_derivative_type UNIQUE(name)
);

-- Tabla Derivative
CREATE TABLE derivative (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  expiry_date TIMESTAMPTZ NOT NULL,
  maturity_date TIMESTAMPTZ,
  underlying_asset VARCHAR,
  spread DECIMAL,
  leverage DECIMAL,
  type_id INT NOT NULL,
  forex_id UUID,
  crypto_id UUID,
  stock_id UUID,
  etf_id UUID,
  CONSTRAINT pk_id_derivative PRIMARY KEY(id),
  CONSTRAINT fk_type_id FOREIGN KEY (type_id) REFERENCES derivative_type(id),
  CONSTRAINT fk_forex_id_derivative FOREIGN KEY (forex_id) REFERENCES forex(asset_id),
  CONSTRAINT fk_crypto_id_derivative FOREIGN KEY (crypto_id) REFERENCES crypto(asset_id),
  CONSTRAINT fk_stock_id_derivative FOREIGN KEY (stock_id) REFERENCES stock(asset_id),
  CONSTRAINT fk_eft_id_derivative FOREIGN KEY (etf_id) REFERENCES etf(asset_id)
);

CREATE TABLE audit_log (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  action VARCHAR NOT NULL,
  timestamp TIMESTAMPTZ DEFAULT NOW(),
  user_id UUID NOT NULL,
  CONSTRAINT pk_id_audit_log PRIMARY KEY(id),
  CONSTRAINT fk_user_id_audit_log FOREIGN KEY (user_id) REFERENCES auth_user(id)
);

CREATE TABLE notification_type (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR UNIQUE NOT NULL,
  CONSTRAINT pk_id_notification_type PRIMARY KEY(id),
  CONSTRAINT uk_name_notification_type UNIQUE(name)
);

CREATE TABLE notification (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  message VARCHAR NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  user_id UUID,
  type_id INT NOT NULL,
  CONSTRAINT pk_id_notification PRIMARY KEY(id),
  CONSTRAINT fk_type_id_notification FOREIGN KEY (type_id) REFERENCES notification_type(id),
  CONSTRAINT fk_user_id_notification FOREIGN KEY (user_id) REFERENCES auth_user(id) ON DELETE CASCADE
);

CREATE TABLE alert (
  id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  message VARCHAR NOT NULL,
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  user_id UUID NOT NULL,
  asset_id UUID,
  CONSTRAINT pk_id_alert PRIMARY KEY(id),
  CONSTRAINT fk_user_id_alert FOREIGN KEY (user_id) REFERENCES auth_user(id),
  CONSTRAINT fk_asset_id_alert FOREIGN KEY (asset_id) REFERENCES asset(id)
);